name: "auto-encoder"
train_steps: 12200
test_steps:100
test_freq:1000
disp_freq:100
checkpoint_path: "examples/rbm/rbm4/checkpoint/step6000-worker0"
checkpoint_path: "examples/rbm/rbm3/checkpoint/step6000-worker0"
checkpoint_path: "examples/rbm/rbm2/checkpoint/step6000-worker0"
checkpoint_path: "examples/rbm/rbm1/checkpoint/step6000-worker0"
train_one_batch{
  alg: kBP
}
updater{
  type: kAdaGrad
  learning_rate{
  base_lr: 0.01
  type: kFixed
  }
}

neuralnet {
  layer {
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "examples/mnist/train_data.bin"
      batchsize: 100
      std_value: 255
      shape: 784
    }
    include: kTrain
  }

  layer {
    name: "data"
    type: kRecordInput
    store_conf {
      backend: "kvfile"
      path: "examples/mnist/test_data.bin"
      std_value: 255
      batchsize: 100
      shape: 784
    }
    include: kTest
  }


  layer{
    name: "embedding"
    type: kDummy
    dummy_conf{
      input: false
      output: false
      shape: 100
      shape: 50
    }
    srclayers:"data"
    unroll_len: 3
    unroll_conn_type: kUnrollOneToAll
    shift: 0
    
  }

  layer{
    name: "gru"
    type: kGRU
    srclayers:"embedding"
    gru_conf{
      dim_hidden: 20
      bias_term: false
    }
    param{
      name:"update_gate_data_weight"
      init {
        type: kUniform
        low:0.0
        high:1.0
      }
    }
    param{
      name:"reset_gate_data_weight"
      init {
        type: kUniform
        low:0.0
        high:1.0
      }
    }
    param{
      name:"new_memory_data_weight"
      init {
        type: kUniform
        low:0.0
        high:1.0
      }
    }
    param{
      name:"update_gate_context_weight"
      init {
        type: kUniform
        low:0.0
        high:1.0
      }
    }
    param{
      name:"reset_gate_context_weight"
      init {
        type: kUniform
        low:0.0
        high:1.0
      }
    }
    param{
      name:"new_memory_context_weight"
      init {
        type: kUniform
        low:0.0
        high:1.0
      }
    }
    unroll_len: 3
    unroll_conn_type: kUnrollOneToOne
    shift: 0
  }

  layer{
    name: "output"
    type: kInnerProduct
    srclayers:"gru"
    innerproduct_conf{
      num_output: 100
    }
    param{
      name: "w"
    }
    param{
      name: "b"
    }
    unroll_len: 1
    unroll_conn_type: kUnrollFirstToLast
    shift: 0
  }

  layer{
    name: "softmax"
    type: kSoftmax
    srclayers:"output"
    unroll_len: 1
    unroll_conn_type: kUnrollOneToOne
    shift: 0
  }

  layer{
    name: "loss"
    type:kSoftmaxLoss
    srclayers:"data"
    srclayers:"softmax"
    unroll_len: 1
    unroll_conn_type: kUnrollOneToAll
    shift: 0
    unroll_conn_type: kUnrollOneToOne
    shift: 0
  }
}


cluster {
  nworker_groups: 1
  nserver_groups: 1
  workspace: "examples/rbm/autoencoder/"
}
